{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","placeholder","onClick","toggleMode","role","htmFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","backgroundColor","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","titile","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.91b5abb1.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { a } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}> {/* ` this symbol beside 1*/}\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"navbar-brand mx-2\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n\r\n        <li className=\"nav-item\">\r\n          <a className=\"navbar-brand mx-2\" href=\"#\">{props.aboutText}</a>\r\n        </li>\r\n\r\n\r\n      </ul>\r\n      <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n\r\n      <div className={`form-check form-switch text-${ props.mode === 'light' ? 'dark' : 'light' } mx-5`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light' ? 'dark' : 'light'} Mode</label>\r\n     </div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n  );\r\n}\r\n\r\n/* isRequired is not mandatory */\r\nNavbar.propTypes={titile: PropTypes.string.isRequired,\r\n                  aboutText: PropTypes.string.isRequired\r\n}\r\n\r\n/*Default props */\r\nNavbar.defaultProps={titile:'Set title Here',\r\n                     aboutText: 'About text here'\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  //function based use state\r\n  const [text, setText] = useState('Enter text here');\r\n\r\n  //event handle + logic of upper casse + state\r\n  const handleUpClick = ()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText=text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Convert to Uppercase!\", \"success\");\r\n  }\r\n\r\n //event handle + logic of lower casse + state\r\n const handleLoClick = ()=>{\r\n  //console.log(\"Uppercase was clicked\" + text);\r\n  let newText=text.toLowerCase();\r\n  setText(newText);\r\n  props.showAlert(\"Convert to Lowercase!\", \"success\");\r\n}\r\n\r\nconst handleclrClick = ()=>{\r\n  //console.log(\"Uppercase was clicked\" + text);\r\n  let newText=\" \";\r\n  setText(newText);\r\n  props.showAlert(\"Cleared Text!\", \"success\");\r\n}\r\n\r\nconst handlecopyClick = ()=>{\r\n  var text = document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Clipboard to text!\", \"success\");\r\n  \r\n}\r\n\r\nconst handlespaceClick = ()=>{\r\n  var newText = text.split(/[ ]+/);\r\n  setText(newText.join(\" \"));\r\n  props.showAlert(\"Remove extra space!\", \"success\");\r\n  \r\n}\r\n\r\n  //handle event + state\r\n  const handleOnChange = (event)=>{\r\n    //console.log(\"handle onchange was clicked\");\r\n    setText(event.target.value);\r\n  }\r\n// using props + event handling inside HTML tags\r\n  return (\r\n    <>\r\n    <div className=\"container\" style={{color : props.mode === 'dark' ? 'white' : 'black'}}>\r\n        <h3>{props.heading}</h3>\r\n        <div className=\"mb-3\">\r\n        \r\n           <textarea className=\"form-control\" style={{backgroundColor : props.mode === 'dark' ? '#042743' : 'white', color : props.mode === 'dark' ? 'white' : 'black' }} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To Uppercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>Convert To Lowercase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleclrClick}>Convert To Clearcase</button> \r\n        <button className=\"btn btn-success mx-2\" onClick={handlecopyClick}>Copy Text</button> \r\n        <button className=\"btn btn-success mx-2\" onClick={handlespaceClick}>Remove Extra Space</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color : props.mode === 'dark' ? 'white' : 'black'}}>\r\n      <h1>your text summary </h1>\r\n      <p>{text.split(\" \").length} Text lengts is: {text.length}</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n\r\n      <h2>Preview</h2>\r\n      <p>{text.length > 0 ? text : \"Enter something in the textbox to preview it here\"} </p>\r\n    </div>\r\n\r\n    </>\r\n  )\r\n}\r\n//define string type props for handle text variable.\r\nTextForm.propTypes = {text : PropTypes.string}\r\n\r\n//use default proptypes provide by default is good practice of props.\r\nTextForm.defaultProps = {text : \"Some text\",\r\n                         title : \"Some title\"\r\n}","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    \r\n  return (\r\n        props.alert && <div className={ `alert alert-${props.alert.type} alert-dismissible fade show `} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n        {/*<button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>*/}\r\n        </div>\r\n  )\r\n}\r\n","//import logo from './logo.svg';\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n\n//import { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('dark');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>\n  {\n    setAlert(\n      {\n        msg : message,\n        type : type\n      }\n    )\n    setTimeout( () =>{\n       setAlert(null);\n    }, 1500 )\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title ='TextUtils - Dark Mode';\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Dark mode has been disabled\", \"success\");\n      document.title ='TextUtils - Light Mode';\n    }\n  }\n  return (\n    <>\n   {/* <Router> */}\n      <Navbar title=\"TextUtils\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/> \n      {\n        /*\n      <div className=\"container my-3\">\n        <TextForm heading=\"Enter the text to Analyze\"/>\n      </div>\n      */\n      }\n      <Alert alert={alert}/>\n\n      <div className=\"container my-3\">\n      {/*\n        <Routes>\n        <Route exact path=\"/about\" element={<About />}></Route>\n        <Route exact path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to Analyze\" mode={mode} />}></Route>\n        </Routes>\n     */}\n      <TextForm showAlert={showAlert} heading=\"Enter the text to Analyze\" mode={mode} />\n      </div>\n\n     {/* <div className=\"container my-3\">\n        <About/>\n      </div>\n    */}\n      \n    {/*</Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}